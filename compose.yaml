services:
  publisher:
    build:
      context: .
      dockerfile: app/services/publisher/Dockerfile
    volumes:
      - muezzin-data:/app/data:rw
    environment:
      ELASTIC_URL: http://elastic:9200
      FILES_DIR: /app/data
      KAFKA_BROKER: kafka:9093
      KAFKA_TOPIC: podcasts
    depends_on:
      - kafka
      - elastic
      - processor

  processor:
    build:
      context: .
      dockerfile: app/services/processor/Dockerfile
    volumes:
      - muezzin-data:/app/data:rw
    environment:
      ELASTIC_URL: http://elastic:9200
      KAFKA_BROKER: kafka:9093
      KAFKA_TOPIC: podcasts
      MONGODB_DATABASE: podcasts
      MONGODB_URL: mongodb://root:example@mongodb-database:27017/
    depends_on:
      - kafka
      - elastic
      - mongodb-database
      - transcriber
    restart: unless-stopped

  transcriber:
    build:
      context: .
      dockerfile: app/services/transcriber/Dockerfile
    environment:
      ELASTIC_URL: http://elastic:9200
      KAFKA_BROKER: kafka:9093
      MONGODB_DATABASE: podcasts
      MONGODB_URL: mongodb://root:example@mongodb-database:27017/
    depends_on:
      - kafka
      - elastic
      - mongodb-database
      - classifier
    restart: unless-stopped

  classifier:
    build:
      context: .
      dockerfile: app/services/classifier/Dockerfile
    environment:
      ELASTIC_URL: http://elastic:9200
      KAFKA_BROKER: kafka:9093
    depends_on:
      - kafka
      - elastic
    restart: unless-stopped

  elastic:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.0
    ports:
      - "9200:9200"
    environment:
      discovery.type: single-node
      xpack.security.enabled: false
      ES_JAVA_OPTS: -Xms1g -Xmx1g

  kibana:
    image: docker.elastic.co/kibana/kibana:8.15.0
    environment:
      ELASTICSEARCH_HOSTS: http://elastic:9200
      xpack.security.enabled: false
      xpack.fleet.agents.enabled: false
      xpack.fleet.isAirGapped: false
    ports:
      - "5601:5601"
    depends_on:
      - elastic

  kafka:
    image: apache/kafka
    ports:
      - "9092:9092"
    environment:
      # Configure listeners for both docker and host communication
      KAFKA_LISTENERS: CONTROLLER://localhost:9091,HOST://0.0.0.0:9092,DOCKER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: HOST://localhost:9092,DOCKER://kafka:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,DOCKER:PLAINTEXT,HOST:PLAINTEXT
      # Settings required for KRaft mode
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9091

      # Listener to use for broker-to-broker communication
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER

      # Required for a single node cluster
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  mongodb-database:
    image: mongo:6.0
    container_name: mongodb-database
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example

volumes:
  mongo-data:
    driver: local
  muezzin-data:
